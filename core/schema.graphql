# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  login: String
  password: PasswordState
  access(
    where: AccessWhereInput! = {}
    orderBy: [AccessOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Access!]
  accessCount(where: AccessWhereInput! = {}): Int
  worksIn(
    where: DepartmentWhereInput! = {}
    orderBy: [DepartmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Department!]
  worksInCount(where: DepartmentWhereInput! = {}): Int
  manages(
    where: DepartmentWhereInput! = {}
    orderBy: [DepartmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Department!]
  managesCount(where: DepartmentWhereInput! = {}): Int
  headOf(
    where: DepartmentWhereInput! = {}
    orderBy: [DepartmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Department!]
  headOfCount(where: DepartmentWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  login: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  login: StringFilter
  access: AccessManyRelationFilter
  worksIn: DepartmentManyRelationFilter
  manages: DepartmentManyRelationFilter
  headOf: DepartmentManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input AccessManyRelationFilter {
  every: AccessWhereInput
  some: AccessWhereInput
  none: AccessWhereInput
}

input DepartmentManyRelationFilter {
  every: DepartmentWhereInput
  some: DepartmentWhereInput
  none: DepartmentWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  login: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  login: String
  password: String
  access: AccessRelateToManyForUpdateInput
  worksIn: DepartmentRelateToManyForUpdateInput
  manages: DepartmentRelateToManyForUpdateInput
  headOf: DepartmentRelateToManyForUpdateInput
}

input AccessRelateToManyForUpdateInput {
  disconnect: [AccessWhereUniqueInput!]
  set: [AccessWhereUniqueInput!]
  create: [AccessCreateInput!]
  connect: [AccessWhereUniqueInput!]
}

input DepartmentRelateToManyForUpdateInput {
  disconnect: [DepartmentWhereUniqueInput!]
  set: [DepartmentWhereUniqueInput!]
  create: [DepartmentCreateInput!]
  connect: [DepartmentWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  login: String
  password: String
  access: AccessRelateToManyForCreateInput
  worksIn: DepartmentRelateToManyForCreateInput
  manages: DepartmentRelateToManyForCreateInput
  headOf: DepartmentRelateToManyForCreateInput
}

input AccessRelateToManyForCreateInput {
  create: [AccessCreateInput!]
  connect: [AccessWhereUniqueInput!]
}

input DepartmentRelateToManyForCreateInput {
  create: [DepartmentCreateInput!]
  connect: [DepartmentWhereUniqueInput!]
}

type Access {
  id: ID!
  name: String
  isContainedIn(
    where: AccessWhereInput! = {}
    orderBy: [AccessOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Access!]
  isContainedInCount(where: AccessWhereInput! = {}): Int
  contains(
    where: AccessWhereInput! = {}
    orderBy: [AccessOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Access!]
  containsCount(where: AccessWhereInput! = {}): Int
  type: AccessTypeType
}

enum AccessTypeType {
  System
  Role
}

input AccessWhereUniqueInput {
  id: ID
  name: String
}

input AccessWhereInput {
  AND: [AccessWhereInput!]
  OR: [AccessWhereInput!]
  NOT: [AccessWhereInput!]
  id: IDFilter
  name: StringFilter
  isContainedIn: AccessManyRelationFilter
  contains: AccessManyRelationFilter
  type: AccessTypeTypeNullableFilter
}

input AccessTypeTypeNullableFilter {
  equals: AccessTypeType
  in: [AccessTypeType!]
  notIn: [AccessTypeType!]
  not: AccessTypeTypeNullableFilter
}

input AccessOrderByInput {
  id: OrderDirection
  name: OrderDirection
  type: OrderDirection
}

input AccessUpdateInput {
  name: String
  isContainedIn: AccessRelateToManyForUpdateInput
  contains: AccessRelateToManyForUpdateInput
  type: AccessTypeType
}

input AccessUpdateArgs {
  where: AccessWhereUniqueInput!
  data: AccessUpdateInput!
}

input AccessCreateInput {
  name: String
  isContainedIn: AccessRelateToManyForCreateInput
  contains: AccessRelateToManyForCreateInput
  type: AccessTypeType
}

type Department {
  id: ID!
  name: String
  heads(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  headsCount(where: UserWhereInput! = {}): Int
  managers(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  managersCount(where: UserWhereInput! = {}): Int
  workers(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  workersCount(where: UserWhereInput! = {}): Int
  isControlledBy(
    where: DepartmentWhereInput! = {}
    orderBy: [DepartmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Department!]
  isControlledByCount(where: DepartmentWhereInput! = {}): Int
  controls(
    where: DepartmentWhereInput! = {}
    orderBy: [DepartmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Department!]
  controlsCount(where: DepartmentWhereInput! = {}): Int
}

input DepartmentWhereUniqueInput {
  id: ID
  name: String
}

input DepartmentWhereInput {
  AND: [DepartmentWhereInput!]
  OR: [DepartmentWhereInput!]
  NOT: [DepartmentWhereInput!]
  id: IDFilter
  name: StringFilter
  heads: UserManyRelationFilter
  managers: UserManyRelationFilter
  workers: UserManyRelationFilter
  isControlledBy: DepartmentManyRelationFilter
  controls: DepartmentManyRelationFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input DepartmentOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input DepartmentUpdateInput {
  name: String
  heads: UserRelateToManyForUpdateInput
  managers: UserRelateToManyForUpdateInput
  workers: UserRelateToManyForUpdateInput
  isControlledBy: DepartmentRelateToManyForUpdateInput
  controls: DepartmentRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input DepartmentUpdateArgs {
  where: DepartmentWhereUniqueInput!
  data: DepartmentUpdateInput!
}

input DepartmentCreateInput {
  name: String
  heads: UserRelateToManyForCreateInput
  managers: UserRelateToManyForCreateInput
  workers: UserRelateToManyForCreateInput
  isControlledBy: DepartmentRelateToManyForCreateInput
  controls: DepartmentRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Setting {
  id: ID!
  projectID: String
  projectName: String
}

input SettingWhereUniqueInput {
  id: ID
}

input SettingWhereInput {
  AND: [SettingWhereInput!]
  OR: [SettingWhereInput!]
  NOT: [SettingWhereInput!]
  id: IDFilter
  projectID: StringFilter
  projectName: StringFilter
}

input SettingOrderByInput {
  id: OrderDirection
  projectID: OrderDirection
  projectName: OrderDirection
}

input SettingUpdateInput {
  projectID: String
  projectName: String
}

input SettingUpdateArgs {
  where: SettingWhereUniqueInput!
  data: SettingUpdateInput!
}

type History {
  id: ID!
  list: String
  ref: String
  at: DateTime
  by: String
  operation: String
  updatedFields: JSON
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input HistoryWhereUniqueInput {
  id: ID
}

input HistoryWhereInput {
  AND: [HistoryWhereInput!]
  OR: [HistoryWhereInput!]
  NOT: [HistoryWhereInput!]
  id: IDFilter
  list: StringFilter
  ref: StringFilter
  at: DateTimeNullableFilter
  by: StringFilter
  operation: StringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input HistoryOrderByInput {
  id: OrderDirection
  list: OrderDirection
  ref: OrderDirection
  at: OrderDirection
  by: OrderDirection
  operation: OrderDirection
}

input HistoryUpdateInput {
  list: String
  ref: String
  at: DateTime
  by: String
  operation: String
  updatedFields: JSON
}

input HistoryUpdateArgs {
  where: HistoryWhereUniqueInput!
  data: HistoryUpdateInput!
}

input HistoryCreateInput {
  list: String
  ref: String
  at: DateTime
  by: String
  operation: String
  updatedFields: JSON
}

type ShiftRule {
  id: ID!
  name: String
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  departments(
    where: DepartmentWhereInput! = {}
    orderBy: [DepartmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Department!]
  departmentsCount(where: DepartmentWhereInput! = {}): Int
  active: Boolean
}

input ShiftRuleWhereUniqueInput {
  id: ID
  name: String
}

input ShiftRuleWhereInput {
  AND: [ShiftRuleWhereInput!]
  OR: [ShiftRuleWhereInput!]
  NOT: [ShiftRuleWhereInput!]
  id: IDFilter
  name: StringFilter
  users: UserManyRelationFilter
  departments: DepartmentManyRelationFilter
  active: BooleanFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ShiftRuleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  active: OrderDirection
}

input ShiftRuleUpdateInput {
  name: String
  users: UserRelateToManyForUpdateInput
  departments: DepartmentRelateToManyForUpdateInput
  active: Boolean
}

input ShiftRuleUpdateArgs {
  where: ShiftRuleWhereUniqueInput!
  data: ShiftRuleUpdateInput!
}

input ShiftRuleCreateInput {
  name: String
  users: UserRelateToManyForCreateInput
  departments: DepartmentRelateToManyForCreateInput
  active: Boolean
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createAccess(data: AccessCreateInput!): Access
  createAccesses(data: [AccessCreateInput!]!): [Access]
  updateAccess(where: AccessWhereUniqueInput!, data: AccessUpdateInput!): Access
  updateAccesses(data: [AccessUpdateArgs!]!): [Access]
  deleteAccess(where: AccessWhereUniqueInput!): Access
  deleteAccesses(where: [AccessWhereUniqueInput!]!): [Access]
  createDepartment(data: DepartmentCreateInput!): Department
  createDepartments(data: [DepartmentCreateInput!]!): [Department]
  updateDepartment(
    where: DepartmentWhereUniqueInput!
    data: DepartmentUpdateInput!
  ): Department
  updateDepartments(data: [DepartmentUpdateArgs!]!): [Department]
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteDepartments(where: [DepartmentWhereUniqueInput!]!): [Department]
  updateSetting(
    where: SettingWhereUniqueInput!
    data: SettingUpdateInput!
  ): Setting
  updateSettings(data: [SettingUpdateArgs!]!): [Setting]
  createHistory(data: HistoryCreateInput!): History
  createHistories(data: [HistoryCreateInput!]!): [History]
  updateHistory(
    where: HistoryWhereUniqueInput!
    data: HistoryUpdateInput!
  ): History
  updateHistories(data: [HistoryUpdateArgs!]!): [History]
  deleteHistory(where: HistoryWhereUniqueInput!): History
  deleteHistories(where: [HistoryWhereUniqueInput!]!): [History]
  createShiftRule(data: ShiftRuleCreateInput!): ShiftRule
  createShiftRules(data: [ShiftRuleCreateInput!]!): [ShiftRule]
  updateShiftRule(
    where: ShiftRuleWhereUniqueInput!
    data: ShiftRuleUpdateInput!
  ): ShiftRule
  updateShiftRules(data: [ShiftRuleUpdateArgs!]!): [ShiftRule]
  deleteShiftRule(where: ShiftRuleWhereUniqueInput!): ShiftRule
  deleteShiftRules(where: [ShiftRuleWhereUniqueInput!]!): [ShiftRule]
  endSession: Boolean!
  authenticateUserWithPassword(
    login: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  login: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  accesses(
    where: AccessWhereInput! = {}
    orderBy: [AccessOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Access!]
  access(where: AccessWhereUniqueInput!): Access
  accessesCount(where: AccessWhereInput! = {}): Int
  departments(
    where: DepartmentWhereInput! = {}
    orderBy: [DepartmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Department!]
  department(where: DepartmentWhereUniqueInput!): Department
  departmentsCount(where: DepartmentWhereInput! = {}): Int
  settings(
    where: SettingWhereInput! = {}
    orderBy: [SettingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Setting!]
  setting(where: SettingWhereUniqueInput!): Setting
  settingsCount(where: SettingWhereInput! = {}): Int
  histories(
    where: HistoryWhereInput! = {}
    orderBy: [HistoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [History!]
  history(where: HistoryWhereUniqueInput!): History
  historiesCount(where: HistoryWhereInput! = {}): Int
  shiftRules(
    where: ShiftRuleWhereInput! = {}
    orderBy: [ShiftRuleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShiftRule!]
  shiftRule(where: ShiftRuleWhereUniqueInput!): ShiftRule
  shiftRulesCount(where: ShiftRuleWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
